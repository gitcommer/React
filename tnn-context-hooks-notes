31 March 2020
https://www.youtube.com/watch?v=6RhOzQciVwI&list=PL4cUxeGkcC9hNokByJilPg5g9m2APUePI

1. create prohect, run, display components, css
2-3. context api (alternative to redux), most use only in sharing state globally
     example: - in this program <ThemeContextProvider> </ThemeContextProvider> has the state attach from ThemeContext.js
              - meaning kani sila na mga components kay maka access sa state ni ThemeContext.js
4-5.(ok/nakasabot nako) different component access data in the context(ThemeContext) also using Theme, use bolean if true change the text background, if false change the text background
6. updating context or state data - when button is click, background will change
7-8.using multiple context - when button is click change the background color of the text
    using multiple comsuming context - mag change change ang text of login or logout when click
9-10. hooks - use to change or update data in the state, you can access state in functional components, creating unique id
11.useState forms - input, submit, display console/page
12.useEffect hook - this function always run everytime there is changes in the state
13.hooks with context - shorter code, when click button change the background
14.using multiple hooks with context - you can use many different context in a components
									 - functional components is shorter code than class components
15.Creating Context with Functional Components, Provider
16-18. (create project) insert, delete, local storage
20-21. apply reducers, action, state in the (create project)

NOTES
------------------------------------------------------------------------------------
Context API - clean & easy way to share state between components (murag pariha og redux)
            - alternative to redux, most use only in sharing state to components globally
Hooks - tap into the inner workings of react in functions(same of php cruds) components
Context + Hooks = is like redux(local database), they can do state management
App.js - mao ni siya mo simble(compile) sa tanang components(web page or data)
CSS - inline

CSS
---
inline (overiding css) - <nav style={{ background: theme.ui, color: theme.syntax }}>

1. create prohect, run, display components, css
------------------------------------------------------------------------------------
- cmd/npx create-react-app contextapp 							
- cmd/cd contextapp/npm start 									
- delete file in src(folder)/App.test.js, logo.svg, App.css, 
- create new file inside src/components/Navbar.js
- add css src/index.css

1. project folder/src/App.js

        import React from 'react';
        import BookList from './components/BookList';     
        import Navbar from './components/Navbar';         

        function App() {
        return (
            <div className="App">
            <Navbar /> 
            <BookList />                                 
            </div>
        );
        }

        export default App;

2. project folder/src/components/Navbar.js

        import React, { Component } from 'react'; 		

        class Navbar extends Component { 				
        render() { 									
            return ( 
            <nav>
                <h1>Context App</h1>
                <ul>
                <li>Home</li>
                <li>About</li>
                <li>Contact</li>
                </ul>
            </nav>
            );
        }
        }
        
        export default Navbar; 							

3. project folder/src/components/BookList.js

        class BookList extends Component {
        render() { 
            return ( 
            <div className="book-list">
                <ul>
                <li>the way of kings</li>
                <li>the name of the wind</li>
                <li>the final empire</li>
                </ul>
            </div>
            );
        }
        }
        
        export default BookList;

4. project folder/src/index.css

        body {
        margin: 0;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
            'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
            sans-serif;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
        }

        /* app styles */
        .App { 						/*App.js, <div className="App">*/
        max-width: 400px;
        margin: 30px auto;
        text-align: center;
        }
        nav{ 						/*Navbar.js, <nav>*/
        padding: 5px;
        }
        nav ul {
        padding: 0;
        }
        nav ul li {
        display: inline-block;
        margin: 0 10px;
        }
        .book-list { 				/*BookList.js, <div className="book-list">*/
        padding: 20px;
        margin-bottom: 20px;
        }
        .book-list ul{
        padding: 0;
        list-style-type: none;
        }
        .book-list li {
        padding: 10px;
        margin: 10px auto;
        border-radius: 10px;
        }


2-3. context api (alternative to redux), most use only in sharing state globally
     example: - in this program <ThemeContextProvider> </ThemeContextProvider> has the state attach from ThemeContext.js
              - meaning kani sila na mga components kay maka access sa state ni ThemeContext.js
------------------------------------------------------------------------------------
note - docs - https://reactjs.org/docs/context.html
     - share state within a "component tree"
     - add react developer tools on your browser
     - state is the data you want to share from the different component
     - properties is the data inside state

1. create src/contexts/ThemeContext.js
2. App.js

        import React from 'react';
        import BookList from './components/BookList';                 
        import Navbar from './components/Navbar';                     
        import ThemeContextProvider from './contexts/ThemeContext';         //7.src/contexts/ThemeContext.js, class ThemeContextProvider

        function App() {
        return (
            <div className="App">
                <ThemeContextProvider>                                      //8.now wrap Navbar and BookList - this components has the access of the state in ThemeContext.js
                    <Navbar />
                    <BookList />
                </ThemeContextProvider>                              
            </div>
        );
        }

        export default App;

4. Navbar.js

        import React, { Component } from 'react'; 		

        class Navbar extends Component { 				
        render() { 									
            return ( 
            <nav>
                <h1>Context App</h1>
                <ul>
                <li>Home</li>
                <li>About</li>
                <li>Contact</li>
                </ul>
            </nav>
            );
        }
        }
        
        export default Navbar; 							

5. BookList.js

        import React, { Component } from 'react';     

        class BookList extends Component {
        render() { 
            return ( 
            <div className="book-list">
                <ul>
                <li>the way of kings</li>
                <li>the name of the wind</li>
                <li>the final empire</li>
                </ul>
            </div>
            );
        }
        }
        
        export default BookList;

6. ThemeContext.js

        import React, { Component, createContext } from 'react';                            //1.createContext - library		
                                                                        
        export const ThemeContext = createContext();                                        //2.createContext - use context					
                                                                        
        class ThemeContextProvider extends Component {                                      //3.create class ThemeContextProvider					
            state = {                                                                       //4.state and property 													    
                isLightTheme: true, 										
                light: { syntax: '#555', ui: '#ddd', bg: '#eee' },
                dark: { syntax: '#ddd', ui: '#333', bg: '#555'}
            }
            render() { 
                return (                                                                    //5.Provider - mao ni siya ang mo share the data sa ThemeContext.js into other components outside
                <ThemeContext.Provider value={{...this.state}}>                             //6.{...this.state} - meaning store in the array the data of state isLightTheme:, light:, dark:
                    {this.props.children}                                                   //9.{this.props.children} - this is the components display in App.js the <Navbar /> and <BookList />
                </ThemeContext.Provider>                                                        children kay sulod man sila sa <ThemeContextProvider> </ThemeContextProvider>  
                );
            }
        }
        
        export default ThemeContextProvider;

7. - check in console, <ThemeContextProvider> </ThemeContextProvider> has the state attach from ThemeContext.js
   - meaning kani sila na mga components kay maka access sa state ni ThemeContext.js

4-5.(ok/nakasabot nako) different component access data in the context(ThemeContext) also using Theme, use bolean if true change the text background, if false change the text background
------------------------------------------------------------------------------------
1. App.js

		import React from 'react';
		import BookList from './components/BookList';                 
		import Navbar from './components/Navbar';                     
		import ThemeContextProvider from './contexts/ThemeContext';   

		function App() {
		return (
			<div className="App">
			<ThemeContextProvider>
				<Navbar />
				<BookList />
			</ThemeContextProvider>                              
			</div>
		);
		}

		export default App;

2. Navbar.js

		import React, { Component } from 'react'; 		
		import { ThemeContext } from '../contexts/ThemeContext'; 				//1.ThemeContext.js hold the data of the state

		//----- SAMPLE 1 USING Context -----

		class Navbar extends Component { 	
		static contextType = ThemeContext;  									//2.ThemeContext found in ThemeContext.js - this will provide data in <ThemeContextProvider></ThemeContextProvider>										
			render() {
				console.log(this.context); 										//3.this.context - refers to contextType that hold the state of data ThemeContext.js								
				const { isLightTheme, light, dark } = this.context;  			//4.get the data of the context and store to variable { isLightTheme, light, dark }				
				const theme = isLightTheme ? light : dark; 						//  isLightTheme, light, dark is the object of the state in ThemeContext.js	 															
				return( 														//5.isLightTheme ? light : dark; - if true display the (? light), false display the (: dark) 
				<nav style={{ background: theme.ui, color: theme.syntax }}> 	//6.{ background: theme.ui, color: theme.syntax } is the object data in the state
					<h1>Context App</h1>
					<ul>
						<li>Home</li>
						<li>About</li>
						<li>Contact</li>
					</ul>
				</nav>
				);
			}
		}

		//----- SAMPLE 2 USING Consumer (same result to sample 1) -----

		class Navbar extends Component { 																					
			render() {																																							
				return( 																
				<ThemeContext.Consumer>{(context) => { 									//1.using consumer - (context) is a variable that hold the state in ThemeContext.js														
					const { isLightTheme, light, dark } = context;  					//2.get the data of the context and store to variable { isLightTheme, light, dark }							
					const theme = isLightTheme ? light : dark; 							//3.isLightTheme, light, dark is the object of the state in ThemeContext.js	 							
					return (
						<nav style={{ background: theme.ui, color: theme.syntax }}>  	//4.{ background: theme.ui, color: theme.syntax } is the object data in the state	
						<h1>Context App</h1>
						<ul>
						<li>Home</li>
						<li>About</li>
						<li>Contact</li>
						</ul>
					</nav>
					)
				}}</ThemeContext.Consumer>
				);
			}
		}
		
		export default Navbar;  

3. BookList.js

		import React, { Component } from 'react';                   
		import { ThemeContext } from '../contexts/ThemeContext';   

		class BookList extends Component {
		static contextType = ThemeContext;                        
		render() {
			console.log(this.context);                             
			const { isLightTheme, light, dark } = this.context;     
			const theme = isLightTheme ? light : dark;             
			return ( 
			<div className="book-list" style={{ background: theme.bg, color: theme.syntax }}>
				<ul>
				<li style={{ background: theme.ui }}>the way of kings</li>
				<li style={{ background: theme.ui }}>the name of the wind</li>
				<li style={{ background: theme.ui }}>the final empire</li>
				</ul>
			</div>
			);
		}
		}
		
		export default BookList;

4. ThemeContext.js

		import React, { Component, createContext } from 'react'; 		
																		
		export const ThemeContext = createContext(); 					
																		
		class ThemeContextProvider extends Component { 					
		state = { 													
			isLightTheme: true, 										
			light: { syntax: '#555', ui: '#ddd', bg: '#eee' },
			dark: { syntax: '#ddd', ui: '#333', bg: '#555'}
		}
		render() { 
			return (
			<ThemeContext.Provider value={{...this.state}}> 	
				{this.props.children}
			</ThemeContext.Provider>
			);
		}
		}
		
		export default ThemeContextProvider;


6. updating context or state data - when button is click, background will change
------------------------------------------------------------------------------------
1. create file src/components/ThemeToggle.js
2. ThemeToggle.js

	import React, { Component } from 'react';
	import { ThemeContext } from '../contexts/ThemeContext';

	class ThemeToggle extends Component {			
		static contextType = ThemeContext; 													//5. 			
		render() { 
			const { toggleTheme } = this.context; 											//6.distucturing context
			return ( <button onClick={toggleTheme}>Toggle the theme</button>); 				//1.toggleTheme - when button is click pass the {toggleTheme} to ThemeContext.js
		}
	}
		
	export default ThemeToggle;

3. ThemeContext.js	

	import React, { Component, createContext } from 'react'; 		
																	
	export const ThemeContext = createContext(); 					 
																	
	class ThemeContextProvider extends Component { 					
	  state = { 													
	    isLightTheme: true, 																
	    light: { syntax: '#555', ui: '#ddd', bg: '#eee' },
	    dark: { syntax: '#ddd', ui: '#333', bg: '#555'}
	  }

	  toggleTheme = () => { 		 														//2.toggleTheme - get data in the button in ThemeToggle.js														
	    this.setState({ isLightTheme: !this.state.isLightTheme }); 							//3.when button is clicked change true and when click again change to false
	  }

	  render() { 
	    return (
	      <ThemeContext.Provider value={{...this.state, toggleTheme: this.toggleTheme}}>  	//4.this.toggleTheme refers to toggleTheme = () => {
	        {this.props.children}
	      </ThemeContext.Provider>
	    );
	  }
	}
	 
	export default ThemeContextProvider;

4. App.js

	import React from 'react';
	import BookList from './components/BookList';                 	
	import Navbar from './components/Navbar';                     
	import ThemeContextProvider from './contexts/ThemeContext';   	
	import ThemeToggle from './components/ThemeToggle'; 			//7.

	function App() {
	  return (
	    <div className="App">
	       <ThemeContextProvider>
	        <Navbar />
	        <BookList />
	        <ThemeToggle />         								//8.display result
	      </ThemeContextProvider>                              
	    </div>
	  );
	}

	export default App;

5. Navbar.js (wala ray i update na code diri)

	import React, { Component } from 'react'; 		
	import { ThemeContext } from '../contexts/ThemeContext'; 			

	class Navbar extends Component { 	
	  //static contextType = ThemeContext; 												
	  render() {
	    //console.log(this.context);  									
	    //const { isLightTheme, light, dark } = this.context; 			
	    //const theme = isLightTheme ? light : dark; 													
	    return( 
	      <ThemeContext.Consumer>{(context) => { 						
	      	const { isLightTheme, light, dark } = context; 				
	    	const theme = isLightTheme ? light : dark; 					
	      	return (
	  			<nav style={{ background: theme.ui, color: theme.syntax }}>
		        <h1>Context App</h1>
		        <ul>
		          <li>Home</li>
		          <li>About</li>
		          <li>Contact</li>
		        </ul>
		      </nav>
	  		)
	      }}</ThemeContext.Consumer>
	    );
	  }
	}
	 
	export default Navbar;

6. BookList.js (wala ray i update na code diri)

	import React, { Component } from 'react';                   
	import { ThemeContext } from '../contexts/ThemeContext';    

	class BookList extends Component {
	  static contextType = ThemeContext;                        
	  render() {
	    console.log(this.context);                              
	    const { isLightTheme, light, dark } = this.context;     
	    const theme = isLightTheme ? light : dark;              
	    return ( 
	      <div className="book-list" style={{ background: theme.bg, color: theme.syntax }}>
	        <ul>
	          <li style={{ background: theme.ui }}>the way of kings</li>
	          <li style={{ background: theme.ui }}>the name of the wind</li>
	          <li style={{ background: theme.ui }}>the final empire</li>
	        </ul>
	      </div>
	    );
	  }
	}
	 
	export default BookList;


7. using multiple context - when button is click change the background color of the text
   using multiple comsuming context - mag change change ang text of login or logout when click
------------------------------------------------------------------------------------
- change text to logout or login when update in inspect element
- When click text change to Login or Logout

1. create file src/contexts/AuthContext.js

	import React, { Component, createContext } from 'react'; 							//1.createContext - use create context library 

	export const AuthContext = createContext(); 										//2.createContext - create a createContext function

	class AuthContextProvider extends Component { 										//3.this is a context provider for authentication
	  state = {
	    isAuthenticated: false
	  }

	  toggleAuth = () => {
	    this.setState({ isAuthenticated: !this.state.isAuthenticated }); 				//4.toggle to true or false
	  }

	  render() { 
	    return (
	      <AuthContext.Provider value={{...this.state, toggleAuth: this.toggleAuth}}> 	//5....this.state - spread the state in array, this.toggleAuth - this will get the data of toggleAuth
	        {this.props.children} 														//6.children meaning si </navbar>, </BookList> etc. ni App.js 
	      </AuthContext.Provider>
	    );
	  }
	}
	 
	export default AuthContextProvider;

2. Navbar.js

	import React, { Component } from 'react';
	import { ThemeContext } from '../contexts/ThemeContext';
	import { AuthContext } from '../contexts/AuthContext';

	class Navbar extends Component {
	  render() {
	    return (
	      <AuthContext>{(authContext) => (                            			
	        <ThemeContext.Consumer>{(themeContext) => { 							//1.using multiple consumer - wrap the whole code <ThemeContext.Consumer>, (themeContext) is a variable 			
	          const { isAuthenticated, toggleAuth } = authContext; 					//2.using multiple consumer - isAuthenticated is in AuthContext.js, toggleAuth is the setState		
	          const { isLightTheme, light, dark } = themeContext;     			
	          const theme = isLightTheme ? light : dark;
	          return (
	            <nav style={{ background: theme.ui, color: theme.syntax }}>
	              <h1>Context App</h1>
	              <div onClick={() => toggleAuth()}> 								//3.using multiple consumer - toggleAuth() when div is click change login or logout               
	                { isAuthenticated ? 'Logged in' : 'Logged out' } 				//4.using multiple consumer - check if isAuthenticated 				 
	              </div>
	              <ul>
	                <li>Home</li>
	                <li>About</li>
	                <li>Contact</li>
	              </ul>
	            </nav>
	          )
	        }}</ThemeContext.Consumer>
	      )}</AuthContext>
	    );
	  }
	}
	 
	export default Navbar;

ThemeContext.js

	import React, { Component, createContext } from 'react'; 		
																	
	export const ThemeContext = createContext(); 					 
																	
	class ThemeContextProvider extends Component { 					
	  state = { 													
	    isLightTheme: true, 																
	    light: { syntax: '#555', ui: '#ddd', bg: '#eee' },
	    dark: { syntax: '#ddd', ui: '#333', bg: '#555'}
	  }

	  toggleTheme = () => { 																
	    this.setState({ isLightTheme: !this.state.isLightTheme }); 							
	  }

	  render() { 
	    return (
	      <ThemeContext.Provider value={{...this.state, toggleTheme: this.toggleTheme}}>  	
	        {this.props.children}
	      </ThemeContext.Provider>
	    );
	  }
	}
	 
	export default ThemeContextProvider;

BookList.js

	import React, { Component } from 'react';                   									
	import { ThemeContext } from '../contexts/ThemeContext';    									

	class BookList extends Component {
	  static contextType = ThemeContext;                        									
	  render() {
	    console.log(this.context);                              									
	    const { isLightTheme, light, dark } = this.context;     									
	    const theme = isLightTheme ? light : dark;              									 
	    return ( 
	      <div className="book-list" style={{ background: theme.bg, color: theme.syntax }}>
	        <ul>
	          <li style={{ background: theme.ui }}>the way of kings</li>
	          <li style={{ background: theme.ui }}>the name of the wind</li>
	          <li style={{ background: theme.ui }}>the final empire</li>
	        </ul>
	      </div>
	    );
	  }
	}
	 
	export default BookList;

App.js

	import React from 'react';
	import BookList from './components/BookList';                 
	import Navbar from './components/Navbar';                     
	import ThemeContextProvider from './contexts/ThemeContext';   
	import ThemeToggle from './components/ThemeToggle';
	import AuthContextProvider from './contexts/AuthContext';

	function App() {
	  return (
	    <div className="App">
	      <ThemeContextProvider>
	        <AuthContextProvider>     									//7.<AuthContextProvider>   - is the </AuthContext.Provider> in AuthContext.js
	          <Navbar />
	          <BookList />
	          <ThemeToggle />
	        </AuthContextProvider>
	      </ThemeContextProvider>
	    </div>
	  );
	}

	export default App;


9-10. hooks - use to change or update data in the state, you can access state in functional components, creating unique id
------------------------------------------------------------------------------------
1. create new app cmd/npx create-react-app hooksapp
2. create folder and file src/compenents/SongList.js

2. SongList.js

		import React, { useState } from 'react'; 							//1.useState is a hook library
		import uuid from 'uuid/v1'; 										//10.useState - use uuid version 1, library tp create unique id

		const SongList = () => { 
		const [songs, setSongs] = useState([ 								//2.useState([]) - define array data, songs - is the data in array like title, id, setSongs - is when array data changes or updated
			{ title: 'almost home', id: 1 },
			{ title: 'memory gospel', id: 2 },
			{ title: 'this wild darkness', id: 3 }
		]);
		//console.log(songs);
		const addSong = () => { 											//7.useState - this new fucntional array will change or update the data of the array
			setSongs([...songs, { title: 'new song', id: uuid() }]); 		//8.useState - insert new data to array of songs
		}; 																	//9.useState - uuid() insert unique id	
		return (
			<div className="song-list">
			<ul>
				{songs.map(song => { 										//3.useState - song is a copy in songs array
				return ( <li key={song.id}>{song.title}</li> );				//4.useState - display, key={song.id - means create a new unique id
				})}
			</ul>
			<button onClick={addSong}>Add a song</button> 					//5.useState - when button is click
			</div>
		);
		}

		export default SongList;

3. App.js

		import React from 'react';
		import SongList from './components/SongList';   

		function App() {
		return (
			<div className="App">
			<SongList />         
			</div>
		);
		}

		export default App;
		
11.useState forms - input, submit, display console/page
---------------------------------------------------------------------------
1.NewSongForm.js - input field, submit, add data to state array, send data to SongList.js to display, prevent refresh, clear field after submit
2.SongList.js - recieve input data from NewSongForm.js, add data to state, display data to page

1.NewSongForm.js

        import React, { useState } from 'react';                                                  //useState is a hooks library

        const NewSongForm = ({ addSong }) => {
        const [title, setTitle] = useState('');                                                   //3.useState('') - get data from forms, title(default data), setTitle(update data)
        // useState can be used multiple times for different data
        const [artist, setArtist] = useState('');
        const handleSubmit = (e) => {                                                             //4.handleSubmit - means what will happen when submit
            e.preventDefault();
            //console.log(title);
            addSong(title);
            setTitle('');                                                                         //5.clear input field after submit
        }
        return (
            <form onSubmit={handleSubmit}>                                                        //2.onSubmit - wrap the data and submit
            <label>Song name:</label>
            <input type='text' value={title} onChange={(e) => setTitle(e.target.value)} />        //1.onChange - value={title} - default value, meand empty pa ang input field
            <input type='submit' value='add' />                                                                - setTitle(e.target.value) - store here the input value and pass here useState('')
            </form>
        );
        }
        
        export default NewSongForm;

2.SongList.js

        import React, { useState } from 'react';
        import uuid from 'uuid/v1';
        import NewSongForm from './NewSongForm';                      //NewSongForm.js

        const SongList = () => {
        const [songs, setSongs] = useState([
            { title: 'almost home', id: 1 },
            { title: 'memory gospel', id: 2 },
            { title: 'this wild darkness', id: 3 }
        ]);

        const addSong = (title) => {                                  //1.(title) - will recieve the data in <input type='text' value={title} in NewSongForm.js
            setSongs([...songs, { title, id: uuid() }]);              //2.add to title and id to the array
        };

        return (
            <div className="song-list">
            <ul>
                {songs.map(song => {
                return ( <li key={song.id}>{song.title}</li> );
                })}
            </ul>
            <NewSongForm addSong={addSong} />                         //3.dislay submitted data from NewSongForm.js
            </div>
        );
        }

        export default SongList;

12.useEffect hook - this function always run everytime there is changes in the state
---------------------------------------------------------------------------
1.only change the SongList.js

        import React, { useState, useEffect } from 'react';                               //2.useEffect
        import uuid from 'uuid/v1';
        import NewSongForm from './NewSongForm';

        const SongList = () => {
        const [songs, setSongs] = useState([
            { title: 'almost home', id: 1 },
            { title: 'memory gospel', id: 2 },
            { title: 'this wild darkness', id: 3 }
        ]);

        const [age, setAge] = useState(20);                                             
        const addSong = (title) => {
            setSongs([...songs, { title, id: uuid() }]);
        };

        useEffect(() => {                                                               //3.useEffect - this only run if there is changes in the songs state                                                          
            console.log('useEffect callback', songs);
        }, [songs]);

        useEffect(() => {                                                               //4.useEffect - this only run if there is changes in the age state                                                                
            console.log('useEffect callback', age);
        }, [age]);

        return (
            <div className="song-list">
            <ul>
                {songs.map(song => {
                return ( <li key={song.id}>{song.title}</li> );
                })}
            </ul>
            <NewSongForm addSong={addSong} />
            <button onClick={() => setAge(age + 1)}>Add 1 to age: {age}</button>      //1.useEffect - when click button get the data of setAge and plus, display data in {age}
            </div>
        );
        }

        export default SongList;

13.hooks with context - shorter code, when click button change the background
---------------------------------------------------------------------------
1.(update) contextapp\src\components\BookList.js

        import React, { useContext } from 'react';                                    //1.useContext hook
        import { ThemeContext } from '../contexts/ThemeContext';

        // class BookList extends Component {
        //   static contextType = ThemeContext;
        //   render() { 
        //     const { isLightTheme, light, dark } = this.context;
        //     const theme = isLightTheme ? light : dark;
        //     return ( 
        //       <div className="book-list" style={{ color: theme.syntax, background: theme.bg }}>
        //         <ul>
        //           <li style={{ background: theme.ui }}>the way of kings</li>
        //           <li style={{ background: theme.ui }}>the name of the wind</li>
        //           <li style={{ background: theme.ui }}>the final empire</li>
        //         </ul>
        //       </div>
        //     );
        //   }
        // }


        //THIS IS SHORTER CODE THAN ABOVE

        const BookList = () => {                                                                        //2.useContext hook
        const { isLightTheme, light, dark } = useContext(ThemeContext);                                 //3.isLightTheme, light, dark - get this property in ThemeContext.js
        const theme = isLightTheme ? light : dark;
        return ( 
            <div className="book-list" style={{ color: theme.syntax, background: theme.bg }}>
            <ul>
                <li style={{ background: theme.ui }}>the way of kings</li>
                <li style={{ background: theme.ui }}>the name of the wind</li>
                <li style={{ background: theme.ui }}>the final empire</li>
            </ul>
            </div>
        );
        }
        
        export default BookList;

14.using multiple hooks with context - you can use many different context in a components
									 - functional components is shorter code than class components
---------------------------------------------------------------------------
1.(update) contextapp\src\components\Navbar.js

		----- SAMPE-1: CONTEXT IN CLASS COMPONENT -----

		import React, { Component } from 'react';
		import { ThemeContext } from '../contexts/ThemeContext';
		import { AuthContext } from '../contexts/AuthContext';

		class Navbar extends Component {
		// static contextType = ThemeContext;
		render() {
			return (
			<AuthContext>{(authContext) => (
				<ThemeContext.Consumer>{(themeContext) => {
				const { isAuthenticated, toggleAuth } = authContext;
				const { isLightTheme, light, dark } = themeContext;
				const theme = isLightTheme ? light : dark;
				return (
					<nav style={{ background: theme.ui, color: theme.syntax }}>
					<h1>Context App</h1>
					<div onClick={() => toggleAuth()}>
						{ isAuthenticated ? 'Logged in' : 'Logged out' }
					</div>
					<ul>
						<li>Home</li>
						<li>About</li>
						<li>Contact</li>
					</ul>
					</nav>
				)
				}}</ThemeContext.Consumer>
			)}</AuthContext>
			);
		}
		}
		
		export default Navbar;

		----- SAMPE-2: CONTEXT IN FUNCTIONAL COMPONENT (same result but this code is short) -----

		import React, { useContext } from 'react'; 								//1.import useContext
		import { ThemeContext } from '../contexts/ThemeContext';
		import { AuthContext } from '../contexts/AuthContext';
		
		const Navbar = () => {
			const { isLightTheme, light, dark } = useContext(ThemeContext);
			const { isAuthenticated, toggleAuth } = useContext(AuthContext);
			const theme = isLightTheme ? light : dark;
			return (
				<nav style={{ background: theme.ui, color: theme.syntax }}>
					<h1>Context App</h1>
					<div onClick={() => toggleAuth()}>
						{ isAuthenticated ? 'Logged in' : 'Logged out' }
					</div>
					<ul>
						<li>Home</li>
						<li>About</li>
						<li>Contact</li>
					</ul>
				</nav>
			);
		}

		export default Navbar;

2.contextapp/src/components/ThemeToggle.js

		----- SAMPE-1: CONTEXT IN CLASS COMPONENT -----

		import React, { Component } from 'react';
		import { ThemeContext } from '../contexts/ThemeContext';

		class ThemeToggle extends Component {
		static contextType = ThemeContext;
			render() { 
				const { toggleTheme } = this.context;
				return ( <button onClick={toggleTheme}>Toggle the theme</button>);
			}
		}
		
		export default ThemeToggle;

		----- SAMPE-2: CONTEXT IN FUNCTIONAL COMPONENT (same result but this code is short) -----

		import React, { useContext } from 'react'; 								//1.import useContext
		import { ThemeContext } from '../contexts/ThemeContext';
		
		const ThemToggle = () => {
			const { toggleTheme }= useContext(ThemeContext);
			return ( 
				<button onClick={toggleTheme}>Toggle the theme</button>
			);
		}

		export default ThemeToggle;

15.Creating Context with Functional Components, Provider
---------------------------------------------------------------------------

1.contextapp/src/contexts/BookContext.js

	import React, { createContext, useState } from 'react'; 	//1.define createContext library

	export const BookContext = createContext(); 				//2.use createContext in a form of function

	const BookContextProvider = (props) => {					//3.(props) - holds the state in ThemeContext.js
	const [books, setBooks] = useState([
		{title: 'name of the wind', id: 1},
		{title: 'the way of kings', id: 2},
		{title: 'the final empire', id: 3},
		{title: 'the hero of ages', id: 4}
	]);
	return (
		<BookContext.Provider value={{books}}> 					//4.send data to ThemeContext.js
			{props.children}
		</BookContext.Provider>
	)
	}

	export default BookContextProvider;							//5.

2.contextapp/src/App.js 

	import React from 'react';
	import BookList from './components/BookList';
	import Navbar from './components/Navbar';
	import ThemeContextProvider from './contexts/ThemeContext';
	import ThemeToggle from './components/ThemeToggle';
	import AuthContextProvider from './contexts/AuthContext';
	import BookContextProvider from './contexts/BookContext'; 		//8.

	function App() {
	return (
		<div className="App">
		<ThemeContextProvider>
			<AuthContextProvider>
			<Navbar />
			<BookContextProvider> 									//7.BookList.js
				<BookList />
			</BookContextProvider>
			<ThemeToggle />
			</AuthContextProvider>
		</ThemeContextProvider>
		</div>
	);
	}

	export default App;

3.contextapp/src/components/BookList.js

	import React, { useContext } from 'react';
	import { ThemeContext } from '../contexts/ThemeContext';
	import { BookContext } from '../contexts/BookContext'; 									//9.

	const BookList = () => {
	const { isLightTheme, light, dark } = useContext(ThemeContext);
	const { books } = useContext(BookContext); 												//10.
	const theme = isLightTheme ? light : dark;
	return ( 
		<div className="book-list" style={{ color: theme.syntax, background: theme.bg }}>
		<ul>
			{books.map(book => { 															//11.
				return (
					<li key={book.id} style={{ background: theme.ui }}>{book.title}</li>
				);
			})}
		</ul>
		</div>
	);
	}
	
	export default BookList;

16-18. (create project) insert, delete, local storage
---------------------------------------------------------------------------
1. npx create-react-app booklist
2. src/contexts/BookContext.js 

	// SAMPLE-1 20.bookReducer.js (USING STATE) ----------------------------------------------------------------

	import React, { createContext, useState } from 'react'; 					//1.import createContext, useState
	import uuid from 'uuid/v1';

	export const BookContext = createContext(); 								//2.use createContext()

	const BookContextProvider = (props) => { 									//3.(props) - store state to this props
		const [books, setBooks] = useState([ 									//4.default and update state
			{title: 'name of the wind', author: 'patrick rothfuss', id: 1},
			{title: 'the final empire', author: 'brandon sanderson', id: 2},
		]);
		const addBook = (title, author) => { 									//5.add new data to this array
			setBooks([...books, {title, author, id: uuid()}]);
		};
		const removeBook = (id) => { 											//6.delete data to this array
			setBooks(books.filter(book => book.id !== id));
		}

		return (
			<BookContext.Provider value={{ books, addBook, removeBook }}> 		//7.wrap data to this provider
				{props.children}
			</BookContext.Provider>
		);
	}
	
	export default BookContextProvider; 										//8.send data and display to App.js

	// SAMPLE-2 20.bookReducer.js (USING REDUCERS / same result but shorter code) ----------------------------------------------------------------

	import React, { createContext, useReducer } from 'react'; 		//5.bookReducer.js - useReducer / local crud
	import { bookReducer } from '../reducers/bookReducer';

	export const BookContext = createContext();

	const BookContextProvider = (props) => {
	const [books, dispatch] = useReducer(bookReducer, []); 			//6.bookReducer.js - use useReducer fuction, dispatch is the action
	return (
		<BookContext.Provider value={{ books, dispatch }}> 			//7.bookReducer.js - dispatch is the action
		{props.children}
		</BookContext.Provider>
	);
	}
	
	export default BookContextProvider;										

3.App.js

	import React from 'react';
	import Navbar from './components/Navbar';
	import BookContextProvider from './contexts/BookContext';
	import BookList from './components/BookList';
	import NewBookForm from './components/NewBookForm';

	function App() {
	return (
		<div className="App">
		<BookContextProvider> 									//9.BookContextProvider hold the state data in BookContext.js 
			<Navbar /> 											//10.Navbar.js can access the state data of BookContext.js 
			<BookList /> 										//5.BookList - display data in BookList.js
			<NewBookForm /> 									//9.NewBookForm.js - 
		</BookContextProvider>
		</div>
	);
	}

	export default App;

4.src/components/Navbar.js 

	import React, { useContext } from 'react';
	import { BookContext } from '../contexts/BookContext'; 					//11.BookContext.js, { BookContext } is the <BookContext.Provider in BookContext.js 

	const Navbar = () => {
	const { books } = useContext(BookContext); 						 		//12.{ books } is the default state in BookContext.js 
	return (
		<div className="navbar">
		<h1>Ninja Reading List</h1>
		<p>Currently you have {books.length} books to get through...</p>	//13.{books.length} or display data in array in the state of BookContext.js 
		</div>
	);
	}
	
	export default Navbar;

5.src/index.css

	body {
		margin: 0;
		font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen",
		"Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue",
		sans-serif;
		-webkit-font-smoothing: antialiased;
		-moz-osx-font-smoothing: grayscale;
		background: #553055;
	}
	.App{
		background: #4c2a4c;
		margin: 20px auto;
		width: 90%;
		max-width: 700px;
		color: #eee;
	}
	.navbar{
		padding: 10px 20px;
		text-align: center;
		background: #6d3d6d
	}
	.navbar h1{
		margin: 10px 0;
	}
	
	.book-list{
		margin: 20px;
	}
	.book-list ul{
		padding: 0;
		list-style-type: none;
	}
	.book-list li{
		background: #6d3d6d;
		border-radius: 4px;
		padding: 10px;
		cursor: pointer;
		margin: 10px 0;
	}
	.book-list li:hover{
		opacity: 0.7;
		text-decoration: line-through;
	}
	.book-list .title{
		font-weight: bold;
		color: #fff;
		font-size: 1.2em;
	}
	.book-list .author{
		font-size: 0.9em;
		color: #ddd;
	}
	.empty{
		margin: 20px;
		text-align: center;
	}
	
	form{
		padding: 20px;
	}
	input[type='text']{
		width: 100%;
		padding: 10px;
		box-sizing: border-box;
		margin: 6px 0;
		background: #3c1f3c;
		color: #fff;
		border: 0;
	}
	input[type='submit']{
		margin: 10px auto;
		background: #eee;
		border: 0;
		padding: 6px 20px;
		display: block;
	}

6.src/components/BookList.js

	import React, { useContext } from 'react'; 									//1.BookList - use hooks library
	import BookDetails from './BookDetails'; 									//6.BookDetails.js - 
	import { BookContext } from '../contexts/BookContext';

	const BookList = () => { 													//2.BookList - create functional component 
	const { books } = useContext(BookContext); 									//3.BookList - use useContext(), { books } holds the state data in BookContext.js 
	return books.length ? ( 													//4.BookList - check of books has data and display
		<div className="book-list">
		<ul>
			{books.map(book => {
			return ( <BookDetails book={book} key={book.id} /> );
			})}
		</ul>
		</div>
	) : (
		<div className="empty">No books to read. Hello free time :).</div>
	);
	}

	export default BookList;

7.src/components/BookDetails.js (click and remove data on the list)

// SAMPLE-1 20.bookReducer.js (USING STATE) ----------------------------------------------------------------

	import React, { useContext } from 'react'; 					//1.BookDetails.js - 
	import { BookContext } from '../contexts/BookContext'; 		//2.BookDetails.js - 

	const BookDetails = ({ book }) => { 						//3.BookDetails.js - 
	const { removeBook } = useContext(BookContext); 			//4.BookDetails.js - use useContext(), { books } holds the state data in BookContext.js 
	return (
		<li onClick={() => removeBook(book.id)}> 				//5.BookDetails.js - when click get the id and remove
			<div className="title">{book.title}</div>
			<div className="author">{book.author}</div>
		</li>
	);
	}

	export default BookDetails;

	// SAMPLE-2 20.bookReducer.js (USING REDUCERS / same result but shorter code) ----------------------------------------------------------------

	import React, { useContext } from 'react';
	import { BookContext } from '../contexts/BookContext';

	const BookDetails = ({ book }) => {
	const { dispatch } = useContext(BookContext); 								//10.bookReducer.js - 
	return (
		<li onClick={() => dispatch({ type: 'REMOVE_BOOK', id: book.id })}> 	//11.bookReducer.js - delete data
		<div className="title">{book.title}</div>
		<div className="author">{book.author}</div>
		</li>
	);
	}

	export default BookDetails;

8.src/components/NewBookForm.js 

// SAMPLE-1 20.bookReducer.js (USING STATE) ----------------------------------------------------------------

	import React, { useContext, useState } from 'react'; 					//1.NewBookForm.js - useContext or hooks
	import { BookContext } from '../contexts/BookContext';

	const NewBookForm = () => { 											//2.NewBookForm.js - functional components
	const { addBook } = useContext(BookContext); 							//3.NewBookForm.js - BookContext.js
	const [title, setTitle] = useState(''); 								//4.NewBookForm.js - default and update state 
	const [author, setAuthor] = useState('');
	
	const handleSubmit = (e) => { 											//6.NewBookForm.js - 
		e.preventDefault();
		//console.log(title, author);
		addBook(title, author); 											//7.NewBookForm.js - add data to title and author state
		setTitle('');
		setAuthor('');
	}

	return (
		<form onSubmit={handleSubmit}>										//5.NewBookForm.js - 
			<input type="text" placeholder="book title" value={title}
				onChange={(e) => setTitle(e.target.value)} />
			<input type="text" placeholder="author name" value={author}
				onChange={(e) => setAuthor(e.target.value)} />
			<input type="submit" value="add book" />
		</form>
	);
	}
	
	export default NewBookForm; 											//8.NewBookForm.js - display data to App.js

	// SAMPLE-2 20.bookReducer.js (USING REDUCERS / same result but shorter code) ----------------------------------------------------------------

	import React, { useContext, useState } from 'react';
	import { BookContext } from '../contexts/BookContext';

	const NewBookForm = () => {
	const { dispatch } = useContext(BookContext); 					//8.bookReducer.js - 
	const [title, setTitle] = useState('');
	const [author, setAuthor] = useState('');
	
	const handleSubmit = (e) => {
		e.preventDefault();
		dispatch({ type: 'ADD_BOOK', book: { title, author }}); 	//9.bookReducer.js - save to reducers 
		setTitle('');
		setAuthor('');
	}

	return (
		<form onSubmit={handleSubmit}>
		<input type="text" placeholder="book title" value={title}
			onChange={(e) => setTitle(e.target.value)} />
		<input type="text" placeholder="author name" value={author}
			onChange={(e) => setAuthor(e.target.value)} />
		<input type="submit" value="add book" />
		</form>
	);
	}
	
	export default NewBookForm;

20. apply reducers, action, state like add, delete in the (create project)
---------------------------------------------------------------------------
1.src/reducers/bookReducer.js 

	import uuid from 'uuid/v4';

	export const bookReducer = (state, action) => { 				//1.bookReducer.js - state (data), action(crud)
		switch (action.type) {
			case 'ADD_BOOK': 										//2.bookReducer.js - ADD_BOOk is the action insert
			return [...state, { 									//3.bookReducer.js - insert the data in the BookContext.js state
				title: action.book.title, 
				author: action.book.author, 
				id: uuid()}
			]
			case 'REMOVE_BOOK': 									//4.bookReducer.js - delete the data in the BookContext.js state
			return state.filter(book => book.id !== action.id);
			default:
			return state;
		}
	}
	
21. local storage(storing the data in the users browser)- meaning bisan i refresh ang page, dili mawala ang data
---------------------------------------------------------------------------
1.chrome, application, localstorage, localhost:3000
2.console and type localstorage - this is use to access localstorage
3.localstorage.setItem('name', 'shaun')



